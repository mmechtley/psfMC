#!/usr/bin/env python
"""
Generate diagnostic plots from psfMC trace databases. Requires (at least) the
name of a traced variable from the model to plot.

Normal 'hist' mode will display histograms of all chains in the database.
'autocorr' and 'trace' modes can also be specified, to view autocorrelation and
trace value vs. sample time plots.

There are several 'magic' trace names that can be used to plot derived
quantities that are not explicitly traced in the database. Component names
should be specified as <index>_<type> such as 0_PointSource or 4_Sersic
<comp1>_<comp2>_magdiff: Magnitude difference between two components
<comp1>_<comp2>_centerdist: Euclidean distance (pixels) between two components
<n>_Sersic_axisratio: Semi-minor/semi-major axis ratio (q) of a Sersic component
<n>_Sersic_sbeff: Surface brightness at Sersic reff, in mag/pixel

Other options that can be specified on the command line:
hist: Generate histogram plots. This is the default behavior, so need not be
  explicitly supplied. If model file is in the same directory as the database,
  and is named similarly, it will be loaded to overplot priors.
autocorr: Generate autocorrelation plots (correlation vs. lag length) for all
  chains,  with labels estimating the number of effective samples
trace: Generate trace plots (value vs. sample index) instead of histograms.
  Useful for assessing suitability of burn-in length.
save: Don't display matplotlib windows, instead save all plots as pdf

Examples:
plot_chain 1_PointSource_mag mydb.fits
  Basic usage. Display histogram plot for a single variable (all walkers).

plot_chain 1_PointSource_2_Sersic_magdiff trace *db.fits
  Will generate trace plots of magnitude difference between PointSource and
  Sersic component for all databases in the current directory

plot_chain 2_Sersic_index autocorr save
  Will generate autocorrelation plots for all databases in the current directory
"""
import os
import glob
import sys
from difflib import SequenceMatcher
from psfMC.analysis import plot_hist, plot_trace, plot_autocorr


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(__doc__)
        exit()

    mode = 'hist'
    for check_mode in ('hist', 'chain', 'trace', 'autocorr'):
        try:
            sys.argv.remove(check_mode)
            mode = check_mode
        except ValueError:
            pass

    save = False
    try:
        sys.argv.remove('save')
        save = True
    except ValueError:
        pass

    trace_name = sys.argv[1]

    db_names = sys.argv[2:]
    if len(db_names) < 1:
        db_names = glob.glob('*db.fits')

    for db_name in db_names:
        # Use some SequenceMatcher text comparison to look for the py file with
        # the most similar name to the db file.
        db_dir = os.path.dirname(db_name)
        py_files = glob.glob(os.path.join(db_dir, '*.py'))
        py_files.sort(key=lambda x: SequenceMatcher(a=db_name, b=x).ratio())
        model_name = py_files[-1] if len(py_files) > 0 else None

        if mode == 'hist':
            if model_name is not None:
                print('Found matching model file {} for database {}'.format(
                    model_name, db_name))
            plot_hist(trace_name, db_name, model=model_name, save=save)
        elif mode in ('chain', 'trace'):
            plot_trace(trace_name, db_name, save=save)
        elif mode == 'autocorr':
            plot_autocorr(trace_name, db_name, save=save)
